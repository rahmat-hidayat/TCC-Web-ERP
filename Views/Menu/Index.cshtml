@using Microsoft.AspNetCore.Mvc.Rendering
@model IEnumerable<TCC_Web_ERP.Models.TMenu>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "MANAGEMENT MENU";
    var antiforgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<h2>@ViewData["Title"]</h2>

<!-- Filter dan Pencarian -->
<div class="row mb-3">
    <div class="col-md-3">
        <label for="statusFilter" class="form-label">FILTER BY STATUS MENU</label>
        <select id="statusFilter" class="form-select">
            <option value="">-- ALL STATUS --</option>
            <option value="Active">ACTIVE</option>
            <option value="Inactive">INACTIVE</option>
        </select>
    </div>
    <div class="col-md-4">
        <label for="searchTitle" class="form-label">SEARCH BY MENU TITLE</label>
        <input type="text" id="searchTitle" class="form-control" placeholder="KETIK MINIMAL 3 HURUF" />
    </div>
</div>

<!-- Tabel Data Menu -->
<table id="menuTable" class="table table-striped table-bordered" style="width:100%">
    <thead>
        <tr>
            <th>ID</th>
            <th>MENU TITLE</th>
            <th>URL</th>
            <th>ACTION NAME</th>
            <th>CONTROLLER NAME</th>
            <th>ICON</th>
            <th>PARENT ID</th>
            <th>ORDER NO</th>
            <th>STATUS</th>
            <th>ACTION</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var menu in Model)
        {
            <tr>
                <td>@menu.MenuId</td>
                <td>@menu.Title</td>
                <td>@menu.Url</td>
                <td>@menu.ActionName</td>
                <td>@menu.ControllerName</td>
                <td>@menu.Icon</td>
                <td>@menu.ParentId</td>
                <td>@menu.OrderNo</td>
                <td>
                    <!-- Toggle Status -->
                    <div class="form-check form-switch">
                        <input class="form-check-input toggle-status" type="checkbox" data-menu-id="@menu.MenuId" @(menu.IsActive ? "checked" : "") />
                    </div>
                </td>
                <td>
                    <button class="btn btn-sm btn-primary me-1 edit-menu-btn" data-menu-id="@menu.MenuId">EDIT</button>
                    <button class="btn btn-sm btn-danger me-1 delete-menu-btn" data-menu-id="@menu.MenuId">DELETE</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal Create/Edit Menu -->
<div id="modalContainer"></div>

<style>
    #menuTable {
        table-layout: auto !important;
        width: 100% !important;
    }

        #menuTable th, #menuTable td {
            white-space: nowrap;
        }

            #menuTable td:last-child {
                min-width: 250px;
            }
</style>

@section Scripts {
    <script>
        $(function () {
            const table = initDataTable();
            bindFilterEvents(table);
            bindEditMenuButton(table);
            bindDeleteMenuButton(table);
            bindFormSubmit(table);
            bindToggleStatus(table); // Bind toggle status change
        });

        function initDataTable() {
            return $('#menuTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@Url.Action("DataTablesJson", "Menu")',
                    type: 'POST',
                    data: function (d) {
                        d.statusFilter = $('#statusFilter').val();
                        d.searchTitle = $('#searchTitle').val();
                    },
                    error: function (xhr) {
                        alert('Error loading data: ' + (xhr.responseJSON?.error || xhr.statusText));
                    }
                },
                columns: [
                    { data: 'menuId' },          // Menu ID
                    { data: 'title' },           // Menu Title
                    { data: 'url' },             // Menu URL
                    { data: 'actionName' },      // Action Name
                    { data: 'controllerName' },  // Controller Name
                    { data: 'icon' },            // Icon
                    { data: 'parentId' },        // Parent ID
                    { data: 'orderNo' },         // Order No
                    {
                        data: 'isActive',        // Status
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            const checked = data === 'Active' ? 'checked' : '';
                            return `
                                <div class="form-check form-switch">
                                    <input class="form-check-input toggle-status" type="checkbox" data-menu-id="${row.menuId}" ${checked} />
                                </div>`;
                        }
                    },
                    {
                        data: 'menuId',
                        orderable: false,
                        searchable: false,
                        render: function (data) {
                            return `
                                <button class="btn btn-sm btn-primary me-1 edit-menu-btn" data-menu-id="${data}">EDIT</button>
                                <button class="btn btn-sm btn-danger me-1 delete-menu-btn" data-menu-id="${data}">DELETE</button>
                            `;
                        }
                    }
                ],
                dom:
                    '<"row mb-2"' +
                        '<"col-sm-6 d-flex align-items-center justify-content-start"l>' +
                        '<"col-sm-6 text-end"B>' +
                    '>' +
                    'rt' +
                    '<"row mt-2"' +
                        '<"col-sm-6 text-start"i>' +
                        '<"col-sm-6 text-end"p>' +
                    '>',
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                buttons: [
                    {
                        text: '<i class="fa-solid fa-plus me-1"></i> ADD MENU',
                        className: 'btn btn-success me-2',
                        action: function () {
                            openCreateModal();
                        }
                    },
                    { extend: 'copy', className: 'btn btn-primary me-2' },
                    { extend: 'csv', className: 'btn btn-primary me-2' },
                    { extend: 'excel', className: 'btn btn-primary me-2' },
                    { extend: 'pdf', className: 'btn btn-primary me-2' },
                    { extend: 'print', className: 'btn btn-primary me-2' }
                ]
            });
        }

        function bindFilterEvents(table) {
            $('#statusFilter, #searchTitle').on('change keyup', function () {
                const search = $('#searchTitle').val();
                if (search.length >= 3 || search.length === 0) {
                    table.ajax.reload();
                }
            });
        }

        function openCreateModal() {
            $.get('@Url.Action("Create", "Menu")', function (html) {
                $('#modalContainer').html(html); // Menampilkan modal create di container
                $('#addEditMenuModal').modal('show'); // Menampilkan modal
            });
        }

        function openEditModal(menuId) {
            $.get('@Url.Action("Edit", "Menu")/' + menuId, function (data) {
                $('#modalContainer').html(data); // Menampilkan modal edit di container
                $('#addEditMenuModal').modal('show'); // Menampilkan modal
            });
        }

        function bindEditMenuButton(table) {
            $('#menuTable').on('click', '.edit-menu-btn', function () {
                var menuId = $(this).data('menu-id');
                openEditModal(menuId); // Panggil fungsi untuk membuka modal Edit
            });
        }

        function bindDeleteMenuButton(table) {
            $('#menuTable').on('click', '.delete-menu-btn', function () {
                var menuId = $(this).data('menu-id');
                Swal.fire({
                    title: 'Apakah Anda yakin?',
                    text: 'Data menu ini akan dihapus secara permanen!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Ya, hapus!',
                    cancelButtonText: 'Batal',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post('@Url.Action("Delete", "Menu")', { id: menuId }, function (response) {
                            if (response.success) {
                                $('#menuTable').DataTable().ajax.reload(null, false);
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Berhasil!',
                                    text: response.message,
                                    timer: 2500,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire('Gagal!', response.message || 'Gagal menghapus data.', 'error');
                            }
                        });
                    }
                });
            });
        }

        function bindFormSubmit(table) {
            $('#modalContainer').on('submit', 'form', function (e) {
                e.preventDefault();
                var form = $(this);

                if (!form[0].checkValidity()) {
                    form[0].reportValidity();
                    return;
                }

                $.ajax({
                    type: form.attr('method'),
                    url: form.attr('action'),
                    data: form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            $('#modalContainer .modal').modal('hide');
                            table.ajax.reload(null, false);
                            Swal.fire({
                                icon: 'success',
                                title: 'Berhasil!',
                                text: response.message,
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            $('#modalContainer').html(response);
                        }
                    },
                    error: function () {
                        Swal.fire('Error', 'Terjadi kesalahan pada server.', 'error');
                    }
                });
            });
        }

        function bindToggleStatus(table) {
            $('#menuTable').on('change', '.toggle-status', function () {
                var checkbox = $(this);
                var menuId = checkbox.data('menu-id');
                var isActive = checkbox.is(':checked'); // Ambil nilai checkbox (checked / unchecked)

                // Kirim AJAX request untuk mengupdate status menu
                $.ajax({
                    url: '@Url.Action("ToggleStatus", "Menu")',  // Aksi controller untuk mengupdate status
                    type: 'POST',
                    data: {
                        id: menuId,
                        isActive: isActive
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()  // Menyertakan token CSRF
                    },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Status berhasil diubah',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            table.ajax.reload(null, false); // Reload DataTable tanpa reset pagination
                        } else {
                            Swal.fire('Gagal!', response.message || 'Gagal mengubah status.', 'error');
                            checkbox.prop('checked', !isActive); // Kembalikan status checkbox jika gagal
                        }
                    },
                    error: function () {
                        Swal.fire('Error', 'Terjadi kesalahan saat mengubah status.', 'error');
                        checkbox.prop('checked', !isActive); // Kembalikan status checkbox jika terjadi error
                    }
                });
            });
        }
    </script>
}
