@using Microsoft.AspNetCore.Mvc.Rendering
@using TCC_Web_ERP.ViewModels

@model TCC_Web_ERP.ViewModels.UserIndexViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "MANAGEMENT USER";
    var roleList = Model.RoleList;
    var antiforgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<h2>@ViewData["Title"]</h2>

<!-- Filter dan Pencarian -->
<div class="row mb-3">
    <div class="col-md-3">
        <label for="roleFilter" class="form-label">FILTER BY ROLE USER</label>
        <select id="roleFilter" class="form-select">
            <option value="">-- ALL ROLE --</option>
            @foreach (var role in roleList)
            {
                <option value="@role.Value">@role.Text</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <label for="searchName" class="form-label">SEARCH BY USER NAME</label>
        <input type="text" id="searchName" class="form-control" placeholder="KETIK MINIMAL 3 HURUF">
    </div>
</div>

<!-- Tabel Data User -->
<table id="userTable" class="table table-striped table-bordered" style="width:100%">
    <thead>
        <tr>
            <th>ID</th>
            <th>USER NAME</th>
            <th>UPT PROGRAMM</th>
            <th>ENTRY USER</th>
            <th>ENTRY DATE</th>
            <th>STATUS</th>
            <th style="display:none;">Role ID</th>
            <th>ROLE USER</th>
            <th>ACTION</th>
        </tr>
    </thead>
</table>

<!-- Modal Tambah User -->
@await Html.PartialAsync("_AddUserModal", new CreateUserViewModel { RoleList = Model.RoleList })

<!-- Modal Edit User -->
@await Html.PartialAsync("_EditUserModal", new EditUserViewModel { RoleList = new List<SelectListItem>() })



<style>
    #userTable {
        table-layout: auto !important;
        width: 100% !important;
    }

        #userTable th, #userTable td {
            white-space: nowrap;
        }

            #userTable td:last-child {
                min-width: 300px;
            }
</style>

@section Scripts {
    <script>
        $(function () {
            const table = initDataTable();
            bindFilterEvents(table);
            bindToggleStatusEvent(table);
            bindAddUserForm(table);
            bindEditUserButton(table);
            bindEditUserForm(table);
        });

        function initDataTable() {
            return $('#userTable').DataTable({
                processing: true,
                serverSide: true,
                autoWidth: false,
                ajax: {
                    url: '@Url.Action("GetUsersJson", "User")',
                    type: 'GET',
                    data: function (d) {
                        d.roleFilter = $('#roleFilter').val();
                        d.searchName = $('#searchName').val();
                    },
                    error: function (xhr) {
                        alert('Error loading data: ' + (xhr.responseJSON?.error || xhr.statusText));
                    }
                },
                columns: [
                    { data: 'userId' },
                    { data: 'userName' },
                    { data: 'uptProgram' },
                    { data: 'entUser' },
                    {
                        data: 'entDate',
                        render: function (data) {
                            if (!data) return '';
                            const date = new Date(data);
                            return date.toLocaleDateString('id-ID');
                        }
                    },
                    {
                        data: 'status',
                        render: function (data) {
                            return data === 'ACT'
                                ? '<span class="text-success fw-bold">AKTIF</span>'
                                : '<span class="text-danger fw-bold">NON AKTIF</span>';
                        }
                    },
                    { data: 'roleId', visible: false },
                    { data: 'roleName' },
                    {
                        data: 'userId',
                        orderable: false,
                        searchable: false,
                        render: function (data) {
                            return `
                                <button class="btn btn-sm btn-primary me-1 edit-user-btn" data-user-id="${data}">EDIT</button>
                                <button class="btn btn-sm btn-info me-1 detail-user-btn" data-user-id="${data}">DETAIL</button>
                                <button class="btn btn-sm btn-danger me-1 delete-user-btn" data-user-id="${data}">DELETE</button>
                                <button class="btn btn-sm btn-warning toggle-status" data-id="${data}">CHANGE STATUS</button>
                            `;
                        }
                    }
                ],
                dom:
                    '<"row mb-2"' +
                        '<"col-sm-6 d-flex align-items-center justify-content-start"l>' +
                        '<"col-sm-6 text-end"B>' +
                    '>' +
                    'rt' +
                    '<"row mt-2"' +
                        '<"col-sm-6 text-start"i>' +
                        '<"col-sm-6 text-end"p>' +
                    '>',
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                buttons: [
                    {
                        text: '<i class="fa-solid fa-plus me-1"></i> ADD USER',
                        className: 'btn btn-success me-2',
                        action: function () {
                            $('#addUserModal').modal('show');
                        }
                    },
                    { extend: 'copy', text: '<i class="fa-solid fa-copy me-1"></i> COPY', className: 'btn btn-primary me-2' },
                    { extend: 'csv', text: '<i class="fa-solid fa-file-csv me-1"></i> CSV', className: 'btn btn-primary me-2' },
                    { extend: 'excel', text: '<i class="fa-solid fa-file-excel me-1"></i> EXCEL', className: 'btn btn-primary me-2' },
                    { extend: 'pdf', text: '<i class="fa-solid fa-file-pdf me-1"></i> PDF', className: 'btn btn-primary me-2' },
                    { extend: 'print', text: '<i class="fa-solid fa-print me-1"></i> PRINT', className: 'btn btn-primary me-2' }
                ]
            });
        }

        function bindFilterEvents(table) {
            $('#roleFilter, #searchName').on('change keyup', function () {
                const search = $('#searchName').val();
                if (search.length >= 3 || search.length === 0) {
                    table.ajax.reload();
                }
            });
        }

        function bindToggleStatusEvent(table) {
            $('#userTable').on('click', '.toggle-status', function () {
                const userId = $(this).data('id');

                Swal.fire({
                    title: 'Ubah Status User?',
                    text: 'Apakah Anda yakin ingin mengubah status user ini?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Ya, ubah!',
                    cancelButtonText: 'Batal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/User/ToggleStatusJson',
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('[name="__RequestVerificationToken"]').val()
                            },
                            data: { id: userId },
                            success: function (response) {
                                if (response.success) {
                                    table.ajax.reload(null, false);
                                    Swal.fire('Berhasil!', 'Status user berhasil diubah.', 'success');
                                } else {
                                    Swal.fire('Gagal', response.message || 'Gagal mengubah status user.', 'error');
                                }
                            },
                            error: function () {
                                Swal.fire('Error', 'Terjadi kesalahan pada server.', 'error');
                            }
                        });
                    }
                });
            });
        }

        function bindAddUserForm(table) {
            $('#formAddUser').submit(function (e) {
                e.preventDefault();
                if (!this.checkValidity()) {
                    this.reportValidity();
                    return;
                }

                const formData = $(this).serialize();
                const userName = $('#UserName').val();

                $.ajax({
                    url: '/User/CreateJson',
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('[name="__RequestVerificationToken"]').val()
                    },
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            $('#addUserModal').modal('hide');
                            $('#formAddUser')[0].reset();
                            table.ajax.reload(null, false);

                            Swal.fire({
                                icon: 'success',
                                title: 'Berhasil!',
                                text: `Data user "${userName}" berhasil diinput.`,
                                timer: 3000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Gagal!',
                                text: response.message || 'Terjadi kesalahan saat menambah user.'
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error!',
                            text: 'Terjadi kesalahan pada server.'
                        });
                    }
                });
            });
        }

        function bindEditUserButton(table) {
            $('#userTable').on('click', '.edit-user-btn', function () {
                const userId = $(this).data('user-id');

                $.ajax({
                    url: '/User/GetUserByIdJson',
                    method: 'GET',
                    data: { id: userId },
                    success: function (data) {
                        if (data && data.userId) {
                            $('#EditUserId').val(data.userId);
                            $('#EditUserName').val(data.userName);

                            // Ambil daftar role
                            $.get('/User/GetRoleListJson', function (roles) {
                                const $dropdown = $('#EditRoleId');
                                $dropdown.empty();
                                $dropdown.append('<option value="">-- PILIH ROLE USER --</option>');

                                roles.forEach(function (role) {
                                    const selected = role.value === data.roleId ? 'selected' : '';
                                    $dropdown.append(`<option value="${role.value}" ${selected}>${role.text}</option>`);
                                });

                                $('#editUserModal').modal('show');
                            });
                        } else {
                            Swal.fire('Error', 'Gagal mengambil data user.', 'error');
                        }
                    }
                });
            });
        }

        function bindEditUserForm(table) {
            $('#formEditUser').submit(function (e) {
                e.preventDefault();
                    // Ubah semua input teks menjadi huruf besar
        $('#formEditUser input[type="text"]').each(function () {
            $(this).val($(this).val().toUpperCase());
        });
                if (!this.checkValidity()) {
                    this.reportValidity();
                    return;
                }

                const formData = $(this).serialize();

                $.ajax({
                    url: '/User/Edit',
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('[name="__RequestVerificationToken"]').val()
                    },
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            $('#editUserModal').modal('hide');
                            table.ajax.reload(null, false);
                            Swal.fire({
                                icon: 'success',
                                title: 'Berhasil!',
                                text: 'Data user berhasil diperbarui.',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Gagal!',
                                text: response.message || 'Terjadi kesalahan saat memperbarui data user.'
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error!',
                            text: 'Terjadi kesalahan pada server.'
                        });
                    }
                });
            });
        }
    </script>
}
